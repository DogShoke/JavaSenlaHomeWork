UML-диаграмма для сущности "Клиент" в банковской системе

Описание:

Диаграмма показывает структуру классов для гипотетической программы работы с клиентами банка. 
Она включает следующие классы:

1. Client
   - Представляет клиента банка.
   - Свойства: clientId, fullName, email, accounts.
   - Методы: addAccount(), getTotalBalance().
   - Клиент владеет одним или несколькими банковскими счетами (агрегация).

2. BankAccount (abstract)
   - Абстрактный класс банковского счёта.
   - Свойства: accountNumber, balance, transactions.
   - Методы: deposit(), withdraw(), addTransaction().
   - Имеет несколько транзакций (агрегация).

3. SavingsAccount
   - Наследует BankAccount.
   - Свойства: interestRate.
   - Методы: applyInterest().

4. CreditAccount
   - Наследует BankAccount.
   - Свойства: creditLimit.
   - Методы: charge(), payDebt().

5. Transaction
   - Представляет банковскую транзакцию.
   - Свойства: transactionId, date, amount, type.
   - Методы: printDetails().
   - Каждая транзакция относится к конкретному счёту (агрегация).

Связи:
- Client → BankAccount: один клиент может иметь несколько счетов.
- BankAccount → Transaction: один счёт может иметь много транзакций.
- Наследование: SavingsAccount и CreditAccount наследуют BankAccount.









UML-диаграмма для сущности "Сотрудник" в системе отдела кадров

Описание

Диаграмма показывает структуру классов для гипотетической программы, предназначенной для управления данными сотрудников в отделе кадров.
Она включает следующие классы:

1. Department
Представляет отдел, в котором работают сотрудники.
Свойства: departmentId, name, employees.
Методы: addEmployee(), removeEmployee(), getEmployeeList().
Один отдел включает несколько сотрудников (композиция).

2. Employee
Представляет сотрудника организации.
Свойства: employeeId, fullName, position, salary, profile.
Методы: assignTask(), getProfile(), getDepartment().
Сотрудник имеет один профиль (композиция) и может выполнять несколько задач (агрегация).

3. Profile
Содержит личную информацию сотрудника.
Свойства: email, phone, address.
Методы: updateContactInfo(), displayInfo().
Профиль принадлежит конкретному сотруднику (композиция).

4. Task
Представляет задачу, назначенную сотруднику.
Свойства: taskId, title, status.
Методы: setStatus(), getDetails().
Задача связана с сотрудником (агрегация).

Связи:
Department → Employee:
Один отдел может содержать множество сотрудников (композиция).
Employee → Profile:
Каждый сотрудник имеет ровно один профиль (композиция).
Employee → Task:
Один сотрудник может выполнять несколько задач (агрегация).
Типы стрелок:
Композиция - чёрный ромб (заполненный), от целого к части.
Агрегация - белый ромб (пустой), от целого к части.
Ассоциация (обычная связь) - простая стрелка.

